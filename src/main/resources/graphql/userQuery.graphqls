scalar DateTime

type Role {
	id: ID!,
	roleName: String
}

type Cafe {
	id: ID!,
	name: String,
	phone: String,
	description: String
}

type User {
	id: ID!,
	firstName: String,
	lastName: String,
	password: String,
	phone: String,
	email: String,
	createdDateTime: DateTime,
	confirmed: Boolean,
	role: Role,
	cafeWork: Cafe
}

type Query {
	users: [User!]!
	user(id: ID): User
	getUserFromJwtToken(token: String!): User
	login(phone: String!, password: String!): String
}

type Mutation {
    createUser(phone: String!, password: String!): User
    deleteUser(id: ID!): Boolean
	createCafe(name: String, phone: String, description: String): Cafe
	subscribeUser(userPhone: String!, subscriptionId: ID!): Boolean
}